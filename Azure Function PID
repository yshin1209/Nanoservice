#r "Newtonsoft.Json"

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Net;
using System.Dynamic;
using System.Net.Http;
using System.Text;


public async static void Run(JObject eventGridEvent, TraceWriter log)
{
    //log.Info(eventGridEvent.ToString(Formatting.Indented));
    string actorId = (string)eventGridEvent["data"]["actorId"];
    double x = (double)eventGridEvent["data"]["value"];
    log.Info("x " + x.ToString());
    //HttpClient client = new HttpClient();   
    string publisherBaseUri = (string)eventGridEvent["data"]["publisherBaseUri"];
    //GetValue 
    string requestUri = publisherBaseUri + "/getValue";
    
    /*
    var r = GetValue(client, actorId, requestUri, "r");
    var Kp = GetValue(client, actorId, requestUri, "Kp");
    var Ki = GetValue(client, actorId, requestUri, "Ki");
    var Kd = GetValue(client, actorId, requestUri, "Kd");
    var previousError = GetValue(client, actorId, requestUri, "previousError");
    var sumError = GetValue(client, actorId, requestUri, "sumError");
    */

    var r = GetValue(actorId, requestUri, "r");
    var Kp = GetValue(actorId, requestUri, "Kp");
    var Ki = GetValue(actorId, requestUri, "Ki");
    var Kd = GetValue(actorId, requestUri, "Kd");
    var previousError = GetValue(actorId, requestUri, "previousError");
    var sumError = GetValue(actorId, requestUri, "sumError");
    
    log.Info("r " + r.ToString());;
    log.Info("Kp " + Kp.ToString());
    log.Info("Ki " + Ki.ToString());
    log.Info("Kd " + Kd.ToString());
    log.Info("previousError " + previousError.ToString());
    log.Info("sumError " + sumError.ToString());

    //PID control
    var currentError = r - x;
    log.Info("currentError " + currentError);

    var diffError = previousError - currentError;
    var u = Kp * currentError + Ki * sumError + Kd * diffError;
    sumError = sumError + currentError;

    //SetValue
    requestUri = publisherBaseUri + "/setValue";

    /*
    SetValue(client, actorId, requestUri, "previousError", currentError);
    SetValue(client, actorId, requestUri, "sumError", sumError);
    SetValue(client, actorId, requestUri, "u", u);
    */
    
    SetValue(actorId, requestUri, "previousError", currentError);
    SetValue(actorId, requestUri, "sumError", sumError);
    SetValue(actorId, requestUri, "u", u);
    log.Info("u " + u.ToString());
}

//GetValue
public static dynamic GetValue (string actorId, string requestUri, string variable)
{
    using(var client = new HttpClient())
    {
        var request = new HttpRequestMessage(HttpMethod.Post, requestUri);
        dynamic requestBody = new ExpandoObject();
        requestBody.actorId = actorId;
        requestBody.variable = variable;
        string jsonRequestBody = JsonConvert.SerializeObject(requestBody);
        request.Content = new StringContent(jsonRequestBody, Encoding.UTF8, "application/json");
        var response = client.SendAsync(request).Result;
        var stringResponseTask = response.Content.ReadAsStringAsync();
        JObject jObj = JObject.Parse(stringResponseTask.Result);
        var value = (dynamic)jObj["value"];
        return value;
    }
}

//SetValue
public async static Task SetValue (string actorId, string requestUri, string variable, dynamic value)
{
    using(var client = new HttpClient())
    {
        var request = new HttpRequestMessage(HttpMethod.Post, requestUri);
        dynamic requestBody = new ExpandoObject();
        requestBody.actorId = actorId;
        requestBody.variable = variable;
        requestBody.value = value;
        string jsonRequestBody = JsonConvert.SerializeObject(requestBody);
        request.Content = new StringContent(jsonRequestBody, Encoding.UTF8, "application/json");
        await client.SendAsync(request);
    }
}
