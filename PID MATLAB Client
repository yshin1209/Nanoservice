% PID (Proportional-Integral_Derivative) Nanoservice client
% Yong-Jun Shin (2018)
% For more information, please visit
% https://github.com/yshin1209/Nanoservice
clc
clear all
close all
timePaused = 0;             % time paused between each iteration in second
actorId = 'actor2';         % new Service Fabric Actor ID

r = 60*sin(-pi:0.05:pi)+200;% reference (target) signal values
setValue (actorId, 'r', r(1), false); % set the Nanoservice variable value

N = length(r);              % number of iteration
timeCom = zeros(N,1);       % time for the round-trip between the client and the cloud
d = zeros(N,1);             % disturbance signal d

x = zeros(N,1);             % output (measured) signal x
setValue (actorId, 'x', x(1), true); % set the Nanoservice variable value

u = zeros(N,1);             % control signal u
setValue (actorId, 'u', u(1), false); % set the Nanoservice variable value

% You can tune Kp, Ki, and Kd for better performance
Kp = 0.2;                   % the proportional parameter Kp
setValue (actorId, 'Kp', Kp, false);  % set the Nanoservice variable value
 
Ki = 0.12;                  % the integral parameter Ki
setValue (actorId, 'Ki', Ki, false);  % set the Nanoservice variable value

Kd = 0.1;                   % the derivative parameter Kd
setValue (actorId, 'Kd', Kd, false);  % set the Nanoservice variable value

setValue (actorId, 'previousError', 0, false);  % set the Nanoservice variable value
setValue (actorId, 'sumError', 0, false);  % set the Nanoservice variable value

for n= 2:N
    pause (timePaused); % default = 0 sec
    
    % add disturbance with magnitude 50 to x at time > 60
    if n > 60
        d(n) = 50;  % disturbance magnitude
    else d(n) = 0;
    end
    
    % simulate x which takes control signal u as an input
    x(n) =0.4*u(n-1)+0.6*x(n-1) + d(n);
    
    % set the Nanoservice variable value
    setValue (actorId, 'r', r(n), false); 
    
    % set the Nanoservice variable value
    setValue (actorId, 'x', x(n), true);   
    
    % start the timer for the round-trip between the client and the cloud
    tic; 
    
    % call the PID Nanoservice (Azure Function) which returns control signal u(n)
    uStruct = getValue (actorId, 'u');
    u(n) = extractfield(uStruct,"value");

    % stop the timer
    timeCom(n) = toc; 
end

subplot(2,1,1);
plot(1:N, r, 'r', 1:N, x, 'b', 1:N, u, 'g', 1:N, d, '*' );
legend('r (reference)', 'x (output)', 'u (control)', 'd (disturbance)');
xlabel('time(n)');
ylabel('magnitude (arbitrary unit)');
axis([0 N 0 450]);

subplot(2,1,2);
plot (1:N, timeCom, '*')
xlabel('time (n)');
ylabel('round-trip time (second)');

function value = getValue(actorId, variable)
baseNanoserviceUri = 'http://nanoservice3.eastus.cloudapp.azure.com';
%baseNanoserviceUri = 'http://csmlab7.uconn.edu';
requestUri = [baseNanoserviceUri '/getValue'];
data = struct('actorId', actorId, 'variable', variable);
options = weboptions('MediaType','application/json', 'Timeout', 100);
value = webwrite(requestUri, data, options);
end

function response = setValue(actorId, variable, value, publish)
baseNanoserviceUri = 'http://nanoservice3.eastus.cloudapp.azure.com';
%baseNanoserviceUri = 'http://csmlab7.uconn.edu';
requestUri = [baseNanoserviceUri '/setValue'];
data = struct('actorId', actorId, 'variable', variable, 'value', value, 'publish', publish);
options = weboptions('MediaType', 'application/json', 'Timeout', 100);
response = webwrite(requestUri, data, options);
end
