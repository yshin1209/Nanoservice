% PID (Proportional-Integral_Derivative) web service client
% Yong-Jun Shin (2018)
% For more information, please visit
% https://github.com/yshin1209/Nanoservice
clc
clear all
close all
timePaused = 0;             % time paused between each iteration in second
actorId = 'actor11';        % new Service Fabric Actor ID
r = 60*sin(-pi:0.05:pi)+200;% reference (target) signal values
tryAddVariable (actorId, 'r', r(1));  % add (if not yet added) the Nanoservice variable to the actor
N = length(r);              % number of iteration
timeCom = zeros(N,1);       % time for the round-trip between the client and the cloud

d = zeros(N,1);             % disturbance signal d

x = zeros(N,1);                     % output (measured) signal x
tryAddVariable (actorId, 'x', 0);   % add (if not yet added) the Nanoservice variable to the actor
setValue (actorId, 'x', 0);         % set the Nanoservice variable value

u = zeros(N,1);                     % control signal u
tryAddVariable (actorId, 'u', 0);   % add (if not yet added) the Nanoservice variable to the actor
setValue (actorId, 'u', 0);         % set the Nanoservice variable value

Kp = 1.1;                           % the proportional parameter Kp
tryAddVariable (actorId, 'Kp', Kp); % add (if not yet added) the Nanoservice variable to the actor
setValue (actorId, 'Kp', Kp);       % set the Nanoservice variable value

Ki = 0.4;                           % the integral parameter Ki
tryAddVariable (actorId, 'Ki', Ki); % add (if not yet added) the Nanoservice variable to the actor
setValue (actorId, 'Ki', Ki);       % set the Nanoservice variable value

Kd = 0.2;                           % the derivative parameter Kd
tryAddVariable (actorId, 'Kd', Kd); % add (if not yet added) the Nanoservice variable to the actor
setValue (actorId, 'Kd', Kd);       % set the Nanoservice variable value

tryAddVariable (actorId, 'previousError', 0);   % add (if not yet added) the Nanoservice variable "previousError"
setValue (actorId, 'previousError', 0);         % set the Nanoservice variable value

tryAddVariable (actorId, 'sumError', 0);        % add (if not yet added) the Nanoservice variable "sumError"
setValue (actorId, 'sumError', 0);              % set the Nanoservice variable value

for n= 2:N
    pause (timePaused)
    disp('iteration')
    n
    
    % add disturbance with magnitude 50 to x at time > 60
    if n > 60
        d(n) = 50;  % disturbance magnitude
    else d(n) = 0;
    end
    
    % simulate x which takes control signal u as an input
    x(n) =0.4*u(n-1)+0.6*x(n-1) + d(n);
    
    setValue (actorId, 'r', r(n));  % set the Nanoservice variable value
    setValue (actorId, 'x', x(n));  % set the Nanoservice variable value
    
    % call the PID Nanoservice (Azure Function) which returns control signal u(n)
    tic;
    uStruct = getValue (actorId, 'u'); 
    u(n) = extractfield(uStruct,"value");
    timeCom(n) = toc; % time for the round-trip between the client and the cloud
end

subplot(2,1,1);
plot(1:N, r, 'r', 1:N, x, 'b', 1:N, u, 'g', 1:N, d, '*' );
legend('r (reference)', 'x (output)', 'u (control)', 'd (disturbance)');
xlabel('time(n)');
ylabel('magnitude (arbitrary unit)');
axis([0 N 0 450]);

subplot(2,1,2);
plot (1:N, timeCom, '*')
xlabel('time (n)');
ylabel('round-trip time (second)');
